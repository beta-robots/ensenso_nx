#!/usr/bin/env python
PACKAGE='ensenso_nx'
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

#     Name     Type    Reconfiguration level            Description                       Default   Min   Max

gen.add("enable_camera", bool_t, 0, "Set true to open camera, set false to close it", False)

mode_enum = gen.enum([gen.const("Server", int_t, 1, "Only services are attended"), gen.const("Publisher", int_t, 2, "Stream and services are available")], "An enum to set mode")
gen.add("run_mode", int_t, 1, "run mode: 1->SERVER, 2->PUBLISHER", 1, 1, 2, edit_method=mode_enum)
gen.add("rate", double_t, 1, "In case of run_mode is set to PUBLISHER, indicates the publish rate [hz]", 1.0, 0.1, 2.0)
gen.add("flexview", int_t, 1, "run mode:0,1->OFF, 1<-> Precision level", 1, 0, 16)
gen.add("auto_exposure", bool_t,  1 , "In case of run_mode is set to PUBLISHER, sets autoexposure [t/f]", False)
gen.add("exposure_time", int_t, 1, "In case of run_mode is set to PUBLISHER and autoexposure is set to False, indicates exposure [millisec]", 20, 1, 100)
gen.add("dense_cloud", bool_t, 1, "1-> the provided cloud is dense (ordered). 0->The provided cloud is not dense (unordered)", True)

gen.add("frame_name", str_t, 2, "frame name to which point cloud is referenced", "single_ensenso_n35_body")

exit(gen.generate(PACKAGE, "ensenso_nx_node", "EnsensoNxParams"))
